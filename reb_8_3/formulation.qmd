---
format:
  html:
    toc: false
    embed-resources: true
---

## Analysis of Processed Data Using the Rate Expression as the Model

{{< include problem_statement.qmd >}}

```{r}
#| echo: false
#| output: false
library(tidyverse)
source("~/Libraries/R/fmt_tibble_col.R")
d <- read.csv("reb_8_3_data.csv")
 # T,t,P
```

The first few data points are shown in @tbl-example_8_3_data. The full data set is available in the file [reb_8_3_data.csv](./reb_8_3/reb_8_3_data.csv).

```{r}
#| echo: false
#| warning: false
#| label: tbl-example_8_3_data
#| tbl-cap: First 5 of the 72 experimentally generated data.
library(kableExtra)
library(knitr)
kbl(d[1:5,], format = "markdown", align = "cc", col.names = c('T (°C)', 't~rxn~ (s)', 'P (atm)'))
```

---

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

This problem has all the characteristics of a kinetics data analysis problem. As is my usual practice, I will start by listing the reactor type, constants provided in the problem statement, the adjusted experimental inputs, the measured experimental responses and the kinetics parameters I need to estimate.

:::

**Reactor Type**: BSTR

**Given Constants**: $V=100 \text{ cm}^3$ and $P_{A,0}=4 \text{ atm}$.

**Adjusted Inputs**: $\underline{T}$ and $\underline{t_{rxn}}$

**Experimental Responses**: $\underline{P}$

**Kinetics Parameters**: $k_0$, and $E$

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

I know that in order to estimate the kinetics parameters I will need to fit a reactor model to the experimental data. I also know that I should analyze the data in blocks where each block contains all of the data at one of the experimental temperatures. I'll use those blocks to estimate the rate coefficient, $k$, at each experimental temperature. Later I'll use the results to find the Arrhenius parameters.

Here I will fit the reactor model to the experimental data using a response function as described in @sec-chapter7. A response function is given the adjusted experimental inputs and values for the kinetics parameters. Internally it must solve the reactor design equations and use the results to calculate and return the model-predicted response. The first thing I need to do then is to identify and write the reactor design equations. As noted in @sec-chapter6, I know that when the reactor operates isothermally, as it did in these experiments, the mole balances on the reagents can be solved independently of the energy balances. Therefore I'll start by generating mole balances on every reagent to use as the reactor model. For that I can use @eq-bstr_mole_bal_one_reaction.
$$
\frac{dn_i}{dt} = \nu_i r V
$$

This system has only 2 reagents, A and A~2~, and their stoichiometric coefficients are -2 and 1, respectively. With that knowledge, I can write the mole balances.

:::

**Reactor Design Equations**

Mole balances on A and A~2~ are presented in equations (3) and (4).

$$
\frac{dn_A}{dt} = -2rV \tag{3}
$$

$$
\frac{dn_{A_2}}{dt} = rV \tag{4}
$$

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

Within the response function, the design equations must be solved numerically. Here the design equations are a set of coupled IVODEs. The dependent variables are $n_A$ and $n_{A_2}$ and the independent variable is $t$. I need three things to solve the IVODEs: (1) ancillary equations to calculate every quantity appearing in the IVODEs using known constants, the independent variable, and the dependent variables, (2) initial values, and (3) a stopping criterion. 

To start, I will go through each of the design equations variable by variable. When a variable isn't a constant, the independent variable or one of the dependent variables, I'll write an expression for it. I'll go through that expression variable by variable, writing expressions for any quantities other than known constants, the independent variable or one of the dependent variables, and so on.

:::

**Ancillary Equations**

When the rate expression is substituted into the mole balances, it introduces the partial pressure of A, which can be expressed in terms of known constants, the independent variable or one of the dependent variables using the ideal gas law, equation (5).

$$
P_A = \frac{n_ART}{V} \tag{5}
$$

The instant the reaction starts can be defined as $t=0$. At that time, no reagent A~2~ is present, so its initial value is zero. The initial value of the molar amount of reagent A can be found from its initial pressure and the ideal gas law. Thus, the initial values are given by equations (6) and (7).

$$
n_A\Big\vert_{t=0} = n_{A,0} = \frac{P_{A,0}V}{RT} \tag{6}
$$

$$
n_{A_2}\Big\vert_{t=0} = n_{A_2,0} = 0 \tag{7}
$$

The stopping criterion is that the time equals the time at which the response was measured, $t_{rxn}$, equation (8).

$$
t_f = t_{rxn}\tag{8}
$$

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

At this point the mole balance design equations can be solved numerically. Doing so will yield the values of $n_A$ and $n_{A_2}$ at a range of times between $t=0$ and $t_f$. Within the response function I need to use those values to calculate the response, which in this problem is the final pressure. I can do that using the ideal gas law and the values of $n_A$ and $n_{A_2}$ at $t_f$.

:::

**Response Function**

Letting $n_{A,f}$ and $n_{A_2,f}$ represent the calculated molar amounts of A and A~2~ at the time the response was measured, the total pressure can be found using the ideal gas law, equation (9).

$$
P = \frac{\left( n_{A,f} + n_{A_2,f} \right)RT}{V} \tag{9}
$$

**Parameter Estimation and Assessment of Accuracy**

```{r}
#| echo: false
#| output: false
library(tidyverse)
source("~/Libraries/R/fmt_tibble_col.R")
d <- read.csv("python/reb_8_3_phase_1_results.csv")
 # T, k, k_ll, k_ul, R_sq_
d <- fmt_tibble_col(d, 2:5, 3, 2, 2)
d$k_full = paste0(d$k,' mol cm^-3^ s^-1^ atm^-1^, 95% CI [',d$k_ll,', ',d$k_ul,']')
```

The reactor model was fit separately to the data in each of the three constant-temperature blocks. The results are shown in @tbl-example_8_3_phase_1_results. The parity and residuals plots shown in @fig-example_8_3_model_plots were then created.

```{r}
#| echo: false
#| warning: false
#| label: tbl-example_8_3_phase_1_results
#| tbl-cap: Estimated values of the rate coefficient at each of the three temperatures studied in the experiments.
d <- d %>% select(T, k_full, R_sq)
library(kableExtra)
library(knitr)
kbl(d, format = "markdown", align = "cc", col.names = c("T (°C)", "k", "R^2^"))
```

::: {#fig-example_8_3_model_plots layout-ncol=2}

![](python/reb_8_3_parity_T_equals_250.png)

![](python/reb_8_3_residuals_T_equals_250.png)

![](python/reb_8_3_parity_T_equals_275.png)

![](python/reb_8_3_residuals_T_equals_275.png)

![](python/reb_8_3_parity_T_equals_300.png)

![](python/reb_8_3_residuals_T_equals_300.png)

Parity and Residuals Plots for each of the three temperature blocks.
:::

The 95% confidence intervals for each of the three estimated rate coefficients are very small compared to the estimated values and the $R^2$ values are almost equal to 1. In the parity plots the magnitude of the deviations of the data points from the line representing a perfect model are small. In the residuals plots the deviations are random (no trends are apparent). All of these observations suggest that the rate expression is very accurate with respect to the composition dependence of the rate.

:::{.callout-note collapse="false"}
## Note

The deviations in the residuals plots appear to be large, but this is because the $y$ axis is greatly expanded in the residuals plots. The parity plots are used to visually assess the magnitude of the errors. The residuals are used to visually assess the randomness of the errors.

:::

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

Having found values for the rate coefficient at each of the three experimental temperature, and having assessed the model to accurately predict the effects of pressure and composition at each experimental temperature, I now need to fit the Arrhenius expression to the rate parameter results I just obtained. I will do this using the linearized form of the Arrhenius expression. (See the previous examples in this Chapter, and @sec-rates-rate-express.)

:::

```{r}
#| echo: false
#| output: false
library(tidyverse)
source("~/Libraries/R/fmt_tibble_col.R")
d <- read.csv("python/reb_8_3_Arrhenius_results.csv")
d <- fmt_tibble_col(d, 2, 3, 2, 2)
a <- c('k~0~','E','R^2^')
b1 <- paste0(d$value[1],' ',d$units[1],', 95% CI [',d$value[2],', ',d$value[3],']')
b2 <- paste0(d$value[4],' ',d$units[4],', 95% CI [',d$value[5],', ',d$value[6],']')
b <- c(b1,b2,d$value[7])
 # item, value, units
d <- data.frame(a,b)
```

The Arrhenius expression was fit to the data in @tbl-example_8_3_phase_1_results with the following results.

```{r}
#| echo: false
#| warning: false
#| label: tbl-example_8_3_arrhenius_results
#| tbl-cap: Parameter estimation results
library(kableExtra)
library(knitr)
kbl(d, format = "markdown", align = "cc", col.names = NULL)
```

The 95% confidence interval for the pre-exponential factor is huge. Specifically it ranges from ca. 5.4 to 11,500 mol cm^-3^ s^-1^ atm^-1^, but a wide confidence interval is often observed for the pre-exponential factor. The 95% confidence interval for the activation energy is smaller (70.8 to 106 kJ mol^-1^). Importantly, the coefficient of determination is equal to 1 and in the Arrhenius plot, @fig-example_8_3_Arrhenius_plot, the estimated rate coefficients fall almost exactly on the line representing the Arrhenius expression.

![Arrhenius plot resulting from the estimated parameters.](python/reb_8_3_Arrhenius_plot.png){#fig-example_8_3_Arrhenius_plot width=80%}

**Recommendation**

The proposed rate expression given in equation (2) provides an accurate representation of the experimental data in this study. It should be accepted with the pre-exponential factor and activation energy shown in @tbl-example_8_3_arrhenius_results.
